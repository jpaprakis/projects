//Note: the JSON will only include steps that are not hidden. Hidden steps are assumed to be removed.
{
    "global_vars": [
        {
            "var_name": "",
            "addr": "",
            "type": "",
            "new": "",
            "value": "", // String or array
            "hex_value": "", // String of hex values of all bytes, including 0-padding
            "invalid": "",
            "location": "stack, heap or data",
            "max_size": 4, // In bytes, the largest size that this variable can be
            "is_ptr": true, // Whether or not it is a pointer
            "ptr_size": 8, // The size of the thing the pointer is pointing to
            "uninitialized": true // Only there if the variable is not initialized
        }
    ],

    "steps": [
        {
            "step": 1,
            "line": 6,
            "student_view_line":1, // The line that the student actually sees on the code mirror: will probably be different if this step is hidden
            // Can have either "changed_vars" or "return", should not have both
            "changed_vars": [
                {
                    "var_name": "",
                    "addr": "",
                    "type": "",
                    "new": "",
                    "value": "", // String for the actual value, or an array of changed_var objects which themselves could be nested deeper
                    "hex_value": "", // String of hex values of all bytes, including 0-padding
                    "invalid": "",
                    "location": "stack, heap or data",
                    "max_size": 4, // In bytes, the largest size that this variable can be
                    "is_ptr": true, // Whether or not it is a pointer
                    "ptr_size": 8, // The size of the thing the pointer is pointing to
                    "uninitialized": true, // Only there if the variable is not initialized

                    "array": true, // True if this is an array
                    "arr_dims": [1,2,3], // The dimensions of the array, in order of declaration
                    "arr_type_size": 4, // The size of the base type of the array
                }
            ],
            "std_out": "standard output text", // This is the text printed by any standard output call in this step, if it was a std out call
            "std_err": "standard error text", // This is only generated by a call to fprintf directing to std err in the code
            "return": 4, // This is the return value if this step is a return statement
            "returned_fn_call": "name of f'n returned from", // This is only included if the line is a return from a function call
            "function": "the function name that this step is in",
            "on_entry_point": true // This is true if we just entered a function, right before executing the first line
        }
    ]

}